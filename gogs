#!/bin/bash


# config ----------

gogs_token=""
gogs_token_envvar=GOGS_API_TOKEN
gogs_token_filename=gogs-api-token.txt

gogs_server="" # https://try.gogs.io
gogs_server_envvar=GOGS_SERVER_URL
gogs_server_filename=gogs-server-url.txt

# utils ----------

function configure {
	# server url
	if [ -n "$(printenv $gogs_server_envvar)" ]; then
		gogs_server=$(printenv $gogs_server_envvar)
	elif [ -f "$gogs_server_filename" ]; then
		gogs_server=$(cat "$gogs_server_filename")
	elif [ $# -eq 0 ]; then
		echo No Gogs server URL \(e.g. https://try.gogs.io\) configured.
		read -p "URL: " gogs_server
		echo
		if [ -z "$gogs_server" ]; then exit 0; fi
	fi

	# api token
	if [ -n "$(printenv $gogs_token_envvar)" ]; then
		gogs_token=$(printenv $gogs_token_envvar)
	elif [ -f "$gogs_token_filename" ]; then
		gogs_token=$(cat "$gogs_token_filename")
	elif [ -f "$gogs_token_filename.gpg" ]; then
		gogs_token=$(gpg -q -d "$gogs_token_filename.gpg")
	elif [ $# -eq 0 ]; then
		echo No Gogs API token configured.
		read -sp "Token: " gogs_token
		echo
		echo
		if [ -z "$gogs_token" ]; then exit 0; fi
	fi
}

function run_curl_and_log {
	if [ $dev -eq 1 ]; then
		echo "$@" > log_curl_cmd.txt
		output=$("$@" 2> log_error.txt)
		echo "$output" > log_curl_response.txt
		echo -n "$output"
	else
		"$@" 2> /dev/null
	fi
}

function gogs-curl {
	method=$1
	cmd=$2
	data="$3"
	auth="?token=$gogs_token"
	address=$gogs_server"/api/v1"$cmd$auth

	if [ $debug -eq 1 ]; then
		echo $method
		echo -e "\tcommand: $cmd"
		echo -e "\taddress: $address"
		echo -e "\tdata:    $data"
	else
		echo
		sleep 1s
		if [ -n "$data" ]; then
			run_curl_and_log curl -d "$data" -H "Content-Type: application/json" -X $method "$address" --insecure
		else
			run_curl_and_log curl -X $method "$address" --insecure
		fi
	fi
}

function gogs-curl_basic {
	method=$1
	auth=$2
	cmd=$3
	data="$4"
	address=$gogs_server"/api/v1"$cmd

	if [ $debug -eq 1 ]; then
		echo $method
		echo -e "\tauth: $auth"
		echo -e "\taddress: $address"
		echo -e "\tdata:    $data"
	else
		echo
		sleep 1s
		if [ -n "$data" ]; then
			run_curl_and_log curl -u $auth -d "$data" -H "Content-Type: application/json" -X $method "$address" --insecure
		else
			run_curl_and_log curl -u $auth -X $method "$address" --insecure
		fi
	fi
}

function syntax-help {
	if [ $1 -gt $(( $# - 2 )) ]; then
		echo Required argument\(s\): $2
		exit 0
	fi
}

function split-json {
	if [ $# -gt 2 ]; then
		echo "$3"
	else
		cat
	fi | sed "s/$1$2/$1\n$2/g"
}

function json-property {
	if [ $# -gt 1 ]; then
		echo "$2"
	else
		cat
	fi | sed "0,/\"$1\"/{s/\"$1\"/@@@/}" | sed -nE "s/^.*@@@:(\
(true)|\
(false)|\
([0-9]+)|\
\"([^\"]*)\"|\
(\[[^]]*\])|\
(\
\{[^{}]*(\
\{[^{}]*(\
\{[^{}]*\}[^{}]*\
)*\}[^{}]*\
)*\}\
)\
).*$/\2\3\4\5\6\7/p"
}

function per-line {
	cat | while IFS='' read -r line; do
		echo $line | $1
	done
}


# actions ----------

actions=$actions" get-org"
function get-org {
	syntax-help 1 "org-name property" "$@"
	json=$(gogs-curl GET /orgs/$1)

	if [[ ! -z $2 ]]; then
		test=`echo "$json" | json-property "$2"`
	else 
		test=`echo "$json"`
	fi

	if [[ -z $test ]]; then
		exit_code=1
	else
		exit_code=0
	fi
	
	echo $test
	return $exit_code
}

actions=$actions" create-org"
function create-org {
	syntax-help 1 "org-name" "$@"

	get-org $1 > /dev/null 2>&1
	if [[ $? -eq 0 ]]; then
		echo "org already exist"
		exit_code=0
	elif [[ $? -eq 1 ]]; then
		output=`gogs-curl POST /admin/users/administrator/orgs "{\"userame\":\"$1\"}"`
		
		test=`echo "$output" | json-property "message"`
		if [[ -z $test ]]; then
			echo $output
			exit_code=0
		else
			echo $output
			exit_code=1
		fi
	else
		echo "Cannot retrieve org"
		exit_code=2
	fi

	return $exit_code
}

actions=$actions" create-org-repo"
function create-org-repo {
	syntax-help 4 "org-name repo-name description private:true/false" "$@"
	gogs-curl POST /org/$1/repos "{\"name\":\"$2\",\"description\":\"$3\",\"private\":$4}"
}

actions=$actions" create-user-repo"
function create-user-repo {
	syntax-help 4 "user-name repo-name description private:true/false" "$@"
	gogs-curl POST /admin/users/$1/repos "{\"name\":\"$2\",\"description\":\"$3\",\"private\":$4}"
}

actions=$actions" delete-repo"
function delete-repo {
	syntax-help 2 "user/org-name repo-name" "$@"
	gogs-curl DELETE /repos/$1/$2
}

actions=$actions" list-org-repos"
function list-org-repos {
	syntax-help 1 "org-name" "$@"
	json=$(gogs-curl GET /orgs/$1/repos)
	if [ $debug -eq 1 ]; then
		echo "$json"
	else
		echo "$json" | split-json "}}," "{" | per-line "json-property name"
	fi
}

actions=$actions" list-user-repos"
function list-user-repos {
	syntax-help 1 "user-name" "$@"
	json=$(gogs-curl GET /users/$1/repos)
	if [ $debug -eq 1 ]; then
		echo "$json"
	else
		echo "$json" | split-json "}}," "{" | per-line "json-property name"
	fi
}

actions=$actions" -"

actions=$actions" get-repo"
function get-repo {
	syntax-help 2 "user/org-name repo-name [property]" "$@"
	json="$(gogs-curl GET /repos/$1/$2)"
	if [ $debug -eq 1 ] || [ -z $3 ]; then
		test=`echo "$json"`
	else
		test=`echo "$json" | json-property "$3"`
	fi

	if [[ -z $test ]]; then
		exit_code=1
	else
		exit_code=0
	fi

	echo $test
	return $exit_code
}

actions=$actions" enable-issues"
function enable-issues {
	syntax-help 3 "user/org-name repo-name enable:true/false" "$@"
	gogs-curl PATCH /repos/$1/$2/issue-tracker "{\"enable_issues\":$3}"
}

actions=$actions" -"

actions=$actions" create-team"
function create-team {
	syntax-help 3 "org-name team-name description [permission: read/write/admin]" "$@"

	get-team $1 $2 > /dev/null 2>&1
	if [[ $? -eq 0 ]]; then
		echo "org already exist"
		exit_code=0
	elif [[ $? -eq 1 ]]; then
		output=`gogs-curl POST /admin/orgs/$1/teams "{\"name\":\"$2\",\"description\":\"$3\",\"permission\":\"$4\"}"`
		
		test=`echo "$output" | json-property "message"`
		if [[ -z $test ]]; then
			echo $output
			exit_code=0
		else
			echo $output
			exit_code=1
		fi
	else
		echo "Cannot retrieve org"
		exit_code=2
	fi

	return $exit_code
}

actions=$actions" list-teams"
function list-teams {
	syntax-help 1 "org-name" "$@"
	json=$(gogs-curl GET /orgs/$1/teams)
	if [ $debug -eq 1 ]; then
		echo "$json"
	else
		echo "$json" | split-json "}," "{" | per-line "json-property name"
	fi
}

actions=$actions" get-teams"
function get-teams {
	syntax-help 1 "org-name property" "$@"
	json=$(gogs-curl GET /orgs/$1/teams)
	test=`echo "$json"`

	if [[ -z $test ]]; then
		exit_code=1
	else
		exit_code=0
	fi

	echo $test
	return $exit_code
}

actions=$actions" get-team"
function get-team {
	syntax-help 2 "org-name/repo-name team-name property" "$@"
	json_teams=`get-teams $1`
	if [ $debug -eq 1 ] || [ -z $3 ]; then
		test=`echo -n $(echo "$json_teams" | split-json "}," "{" | grep "\"name\":\"$2\"")`
	else
		test=`echo -n $(echo "$json_teams" | split-json "}," "{" | grep "\"name\":\"$2\"" | json-property $3)`
	fi

	if [[ -z $test ]]; then
		exit_code=1
	else
		exit_code=0
	fi

	echo $test
	return $exit_code
}

actions=$actions" -"

actions=$actions" add-collaborator"
function add-collaborator {
	syntax-help 3 "user/org-name repo-name user-name [permission: read/write/admin]" "$@"

	get-repo $1 $2 > /dev/null 2>&1

	if [[ $? -ne 0 ]]; then
		echo "Cannot retrieve repository $1/$2, please ensure the repository already exist"
		return 1
	fi

	get-user $1 > /dev/null 2>&1

	if [[ $? -ne 0 ]]; then
		echo "Cannot retrieve user $3, please ensure the user already exist"
		return 1
	fi

	output=`gogs-curl PUT /repos/$1/$2/collaborators/$3 "{\"permission\":\"$4\"}"`
	error=`echo "$output" | json-property "message"`

	if [[ -z $error ]]; then
		message=$output
		exit_code=0
	else
		message="ERROR: $error"
		exit_code=1
	fi


	echo $message
	return $exit_code

}

actions=$actions" remove-collaborator"
function remove-collaborator {
	syntax-help 3 "user/org-name repo-name user-name" "$@"
	gogs-curl DELETE /repos/$1/$2/collaborators/$3
}

actions=$actions" list-collaborators"
function list-collaborators {
	syntax-help 2 "user/org-name repo-name" "$@"
	json=$(gogs-curl GET /repos/$1/$2/collaborators)
	if [ $debug -eq 1 ]; then
		echo "$json"
	else
		echo "$json" | split-json "}," "{" | per-line "json-property username"
	fi
}

actions=$actions" -"

actions=$actions" add-team-member"
function add-team-member {
	syntax-help 3 "org-name/repo-name team-name user-name" "$@"

	get-user $3 > /dev/null 2>&1

	if [[ $? -ne 0 ]]; then
		echo "ERROR: user not found, please create if first"
		exit_code=1
	fi
	
	id=`get-team $1 $2 id`
	if [[ $? -ne 0 ]]; then
		echo "ERROR: team not found, please create if first"
		exit_code=1
	fi

	members_list=`list-team-members $id`

	if [[ " ${members_list[*]} " =~ " ${3} " ]]; then
		message="user already exist"
		exit_code=0
	else
		output=`gogs-curl PUT /admin/teams/$id/members/$3`
		
		error=`echo "$output"`
		if [[ -z $error ]]; then
			message="user $3 added to the team id $id"
			exit_code=0
		else
			message="ERROR: $error"
			exit_code=1
		fi
	fi

	echo $message
	return $exit_code
}

actions=$actions" remove-team-member"
function remove-team-member {
	syntax-help 2 "team-id user-name" "$@"
	gogs-curl DELETE /admin/teams/$1/members/$2
}

actions=$actions" list-team-members"
function list-team-members {
	syntax-help 1 "team-id" "$@"
	json=$(gogs-curl GET /admin/teams/$1/members)
	if [ $debug -eq 1 ]; then
		test=`echo "$json"`
	else
		test=`echo "$json" | split-json "}," "{" | per-line "json-property username"`
	fi

	if [[ -z $test ]]; then
		exit_code=1
	else
		exit_code=0
	fi

	echo $test
	return $exit_code
}

actions=$actions" -"

actions=$actions" add-team-repo"
function add-team-repo {
	syntax-help 2 "team-id repo-name" "$@"
	gogs-curl PUT /admin/teams/$1/repos/$2
}

actions=$actions" remove-team-repo"
function remove-team-repo {
	syntax-help 2 "team-id repo-name" "$@"
	gogs-curl DELETE /admin/teams/$1/repos/$2
}

actions=$actions" get-user"
function get-user {
	syntax-help 1 "user-name property" "$@"
	json=$(gogs-curl GET /users/$1)
	if [ $debug -eq 1 ] || [ -z $2 ]; then
		test=`echo "$json"`
	else
		test=`echo "$json" | json-property "$2"`
	fi

	if [[ -z $test ]]; then
		exit_code=1
	else
		exit_code=0
	fi

	echo $test
	return $exit_code
}

actions=$actions" create-user"
function create-user {
	syntax-help 3 "user-name email password" "$@"

	get-user $1 > /dev/null 2>&1

	if [[ $? -eq 0 ]]; then
		message="user $1 already exist"
		exit_code=0
	elif [[ $? -eq 1 ]]; then
		output=`gogs-curl POST /admin/users "{\"username\": \"$1\", \"email\": \"$2\", \"password\":\"$3\"}"`
		error=`echo "$output" | json-property "message"`
		if [[ -z $error ]]; then
			message=$output
			exit_code=0
		else
			message="ERROR: $error"
			exit_code=1
		fi
	else
		message="ERROR: Cannot retrieve org"
		exit_code=2
	fi

	echo $message
	return $exit_code
}

actions=$actions" create-user-token"
function create-user-token {
	syntax-help 3 "user-name password token-name" "$@"

	get-user $1 > /dev/null 2>&1

	if [[ $? -eq 0 ]]; then
		output=`gogs-curl_basic POST "$1:$2" /users/$1/tokens "{\"name\":\"$3\"}"`
		error=`echo "$output" | json-property "message"`

		if [[ -z $error ]]; then
			message=$output
			exit_code=0
		else
			message="ERROR: $error"
			exit_code=1
		fi
	else
		message="Error: Cannot retrieve user"
		exit_code=2
	fi

	echo $message
	return $exit_code
}

actions=$actions" create-mirror"
function create-mirror {
	syntax-help 5 "clone-address repo-name uid private mirror [optionnal: user password]" "$@"
	if [ -z "$6" ]; then
		output=`gogs-curl POST /repos/migrate "{\"clone_addr\": \"$1\", \"repo_name\": \"$2\", \"uid\": $3, \"private\": $4, \"mirror\": $5}"`
	else
		output=`gogs-curl POST /repos/migrate "{\"clone_addr\": \"$1\", \"repo_name\": \"$2\", \"uid\": $3, \"private\": $4, \"mirror\": $5, \"auth_username\":\"$6\", \"auth_password\":\"$7\"}"`
	fi

	error=`echo "$output" | json-property "message"`

	if [[ -z $error ]]; then
		message=$output
		exit_code=0
	else
		message="ERROR: $error"
		exit_code=1
	fi

	echo $message
	return $exit_code
}

actions=$actions" -"

actions=$actions" get-commit"
function get-commit {
	syntax-help 3 "user/org-name repo-name branch/tag/sha [property]" "$@"
	json="$(gogs-curl GET /repos/$1/$2/commits/$3)"
	if [ $debug -eq 1 ]; then
		echo "$json"
	else
		if [ -z $4 ]; then
			echo "$json"
		else
			echo "$json" | json-property "$4"
		fi
	fi
}

actions=$actions" get-raw"
function get-raw {
	syntax-help 3 "user/org-name repo-name ref" "$@"
	gogs-curl GET /repos/$1/$2/raw/$3
}


# cmd interface ----------

function print-help {
	echo
	echo \*\* Gogs command line interface \*\*
	echo
	echo "  "----------
	echo
	for action in $actions; do
		if [ "$action" == "-" ]; then
			echo
		else
			echo "  "$action
		fi
	done
	configure do-not-ask-if-not-configured
	echo
	echo "  "----------
	echo
	echo "  "Current configuration:
	echo
	echo -e "  "Server: $(if [ -z "$gogs_server" ]; then echo "\033[0;31m"NOT-CONFIGURED"\033[0m"; fi)$gogs_server
	echo "  "\(Change via environment variable $gogs_server_envvar or $gogs_server_filename\)
	echo
	echo -e "  "API token: $(if [ -z "$gogs_token" ]; then echo "\033[0;31m"NOT-CONFIGURED"\033[0m"; else echo ${gogs_token:0:5}...; fi)
	echo "  "\(Change via environment variable $gogs_token_envvar or $gogs_token_filename[.gpg]\)
	echo "  "\(Create one here: $(if [ -z "$gogs_server" ]; then echo https://YOUR.GOGS.SERVER; fi)$gogs_server/user/settings/applications\)
	echo
}

debug=0
dev=0
while [ -n "$1" ] && [[ "$1" == "-"* ]] && [ "$1" != "--" ]; do
	case "$1" in
		-d) debug=1; echo \# DRY RUN \(doing nothing\) ;;
		-D) dev=1; echo \# DEV RUN ;;
	esac
	shift
done

function run_action {
	action=$1
	if [ $dev -eq 1 ]; then
		echo \# action: $action
	fi
	configure
	if [ $dev -eq 1 ]; then
		echo \# configured \| URL: $gogs_server \| Token: $gogs_token
	fi
	"$@"
}

if [ $# -gt 0 ]; then
	action=$1
	shift
	for a in $actions; do
		if [ "$a" == "$action" ] && [ "$a" != "-" ]; then
			run_action $action "$@"
			exit $?
		fi
	done
	case $action in
		--help) print-help ;;
		--)
			action=$1
			shift
			run_action $action "$@"
			;;
		*) echo Unrecognized action: \"$action\" ;;
	esac
else
	print-help
fi
